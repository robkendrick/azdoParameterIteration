parameters:
  - name: deploymentEnvironment
    type: string
    default: QA
  - name: serviceConnection
    type: string
    default: DLNAzureAD
  - name: deploymentResources
    type: object
    default:
      - type: keyVault
        namePrefix: project00kv
        rGTN: Ops
        suffix: abcdefghij
      - type: database
        namePrefix: project01sqls
        rGTN: Data
        suffix: jihgfedcba
        databases:
          - name: database01db
            readers:            # Note: Readers also get the CONNECT grant, and the DLN {Env} DB Readers group will be added automatically.
              - name: database01mid
                includeSuffix: true
                environments: ['Dev', 'QA', 'Preprod', 'Prod']
            writers:            # Note: Writers also get the EXECUTE grant.
              - name: database01mid
                includeSuffix: true
                environments: ['QA', 'Preprod']
            admins:                 # Admins get the db_ddladmin role.
              - name: 'testemail@test.local'
                includeSuffix: false
                environments:
                  - Dev
                  - QA
#          - name: database02db
#            readers:
#              - name: database02mid
#                environments: "Dev, QA, Preprod, Prod"
#            writers:
#              - name: database02mid
#                environments: "Dev, QA, Preprod, Prod"

variables:
  system.debug: true

jobs:
  - job: IterationAndAssignment
    displayName: "Iterate through each Supporting Resource and pull properties and suffixes via environment variables."
    steps:
      - checkout: none
      - ${{ each res in parameters.deploymentResources }}:
          - ${{ if eq(res.type, 'database') }}:
            - bash: |
                echo "Number of resources: $numRes"
                echo "SQL Server for this run: $sqlServerName"
              name: ${{res.namePrefix}}${{res.suffix}}
              env:
                numRes: ${{ length(parameters.deploymentResources) }}
                sqlServerName: ${{res.namePrefix}}${{res.suffix}}

      - ${{ each res in parameters.deploymentResources }}:
          - bash: |
              echo "The resource we're working with is $namePrefix in the ProjectDev-$rGTN Resource Group."
              echo "It is a $type."
              echo ""; echo ""
              echo "Let's try to assign them as outputs."
              echo "##vso[task.setvariable variable=suffix;isOutput=true]$suffix"
            env:
              type: ${{res.type}}
              namePrefix: ${{res.namePrefix}}
              rGTN: ${{res.rGTN}}
              suffix: ${{res.suffix}}
            name: ${{res.type}}
            displayName: 'Supporting Resource - ${{res.type}}: ${{res.namePrefix}}'

  - job: ManualSQLConnection
    dependsOn: IterationAndAssignment
    steps:
      - checkout: none
      - task: AzureCLI@2
        name: getToken
        inputs: 
          azureSubscription: ${{parameters.serviceConnection}}
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            $token = $(az account get-access-token --resource=https://database.windows.net --query accessToken -o tsv)
            echo "##vso[task.setvariable variable=sqlToken;issecret=true;]$token"
            $conn = new-object System.Data.SqlClient.SqlConnection
            $conn.ConnectionString = "Server=tcp:${{parameters.deploymentResources[1].namePrefix}}${{parameters.deploymentResources[1].suffix}},1433;Initial Catalog=${{parameters.deploymentResources[1].databases[0].name}}${{parameters.deploymentResources[1].suffix}};Persist Security Info=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;" 
            $conn.AccessToken = $token

  - job: TestIterationOutput
    condition: false
    displayName: "Test selectively deploying based on elements in an array."
    dependsOn: IterationAndAssignment
    variables:
      - ${{ each res in parameters.deploymentResources }}:
          - name: ${{res.type}}Suffix
            value: $[dependencies.IterationAndAssignment.outputs['${{res.type}}.suffix']]
    steps:
      - checkout: none
      - bash: |
          echo "Deployment Environment: ${{parameters.deploymentEnvironment}}"
#          echo "Test DB Environment check: ${{parameters.deploymentResources[1].databases[0].readers[0].environments}}"
#          echo "Does the DB need permissions for this environment? ${{ contains(parameters.deploymentResources[1].databases[0].readers[0].environments, parameters.deploymentEnvironment)}}"
        displayName: 'Deployment Environment: ${{parameters.deploymentEnvironment}}'
      - ${{ each res in parameters.deploymentResources }}:
          - bash: |
              echo "Macro variable test for the suffix: $(${{res.type}}Suffix)"
              echo "Environment variable Macro test for the suffix: $suffix"
            env:
              suffix: $(${{res.type}}Suffix)
            displayName: Check variables for ${{res.namePrefix}}.
          - ${{ if eq(res.type, 'database') }}:
            - ${{each db in res.databases}}:
                - ${{ each reader in db.readers }}:
                    - ${{ if containsValue(reader.environments, parameters.deploymentEnvironment) }}:
                        - bash: |
                            if [ "${{reader.includeSuffix}}" ]; then
                              echo "We'll be adding the suffix $(databaseSuffix) to the reader ${{reader.name}}."
                              echo "##vso[task.setvariable variable=readerName;isoutput=true]${{reader.name}}$(databaseSuffix)"
                            else
                              echo "No Suffix for ${{reader.name}}."
                              echo "##vso[task.setvariable variable=readerName;isoutput=true]${{reader.name}}"
                            fi
                          name: rs
                          displayName: 'Include suffix for ${{reader.name}}? ${{reader.includeSuffix}}.'
                        - bash: echo "Adding reader $(rs.readerName) to database ${{db.name}} in ${{parameters.deploymentEnvironment}}"
                          displayName: 'Add $(rs.readerName) to ${{db.name}}.'
#               - ${{ each writer in db.writers }}:
#                   - ${{ if containsValue(writer.environments, parameters.deploymentEnvironment) }}:
#                     - ${{ if eq(writer.includeSuffix, 'true') }}:
#                       - bash: echo "Adding writer ${{writer.name}}$(databaseSuffix) to database ${{db.name}} in ${{parameters.deploymentEnvironment}}"
#                         displayName: 'SuffixWriter: Add ${{writer.name}}$(databaseSuffix) to ${{db.name}}.'
#                     - ${{ else }}:
#                       - bash: echo "Adding writer ${{writer.name}} to database ${{db.name}} in ${{parameters.deploymentEnvironment}}"
#                         displayName: 'NoSuffWriter: Add ${{writer.name}} to ${{db.name}}.'
#               - ${{ each admin in db.admins }}:
#                   - ${{ if containsValue(admin.environments, parameters.deploymentEnvironment) }}:
#                     - ${{ if eq(admin.includeSuffix, 'true') }}:
#                       - bash: echo "Adding admin ${{admin.name}}$(databaseSuffix) to database ${{db.name}} in ${{parameters.deploymentEnvironment}}"
#                         displayName: 'SuffixAdmin: Add ${{admin.name}}$(databaseSuffix) to ${{db.name}}.'
#                     - ${{ else }}:
#                       - bash: echo "Adding admin ${{admin.name}} to database ${{db.name}} in ${{parameters.deploymentEnvironment}}"
#                         displayName: 'NoSuffAdmin: Add ${{admin.name}} to ${{db.name}}.'